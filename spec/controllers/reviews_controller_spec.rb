# require 'spec_helper'
# 
# # This spec was generated by rspec-rails when you ran the scaffold generator.
# # It demonstrates how one might use RSpec to specify the controller code that
# # was generated by Rails when you ran the scaffold generator.
# #
# # It assumes that the implementation code is generated by the rails scaffold
# # generator.  If you are using any extension libraries to generate different
# # controller code, this generated spec may or may not pass.
# #
# # It only uses APIs available in rails and/or rspec-rails.  There are a number
# # of tools you can use to make these specs even more expressive, but we're
# # sticking to rails and rspec-rails APIs to keep things simple and stable.
# #
# # Compared to earlier versions of this generator, there is very limited use of
# # stubs and message expectations in this spec.  Stubs are only used when there
# # is no simpler way to get a handle on the object needed for the example.
# # Message expectations are only used when there is no simpler way to specify
# # that an instance is receiving a specific message.
# 
# describe ReviewsController, :type => :controller do
  # login_user
# 
  # after(:each) do
    # User.delete_all
  # end
# 
  # # This should return the minimal set of attributes required to create a valid
  # # Review. As you add validations to Review, be sure to
  # # update the return value of this method accordingly.
  # def valid_attributes
    # { "product" => "" }
  # end
# 
  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # ReviewsController. Be sure to keep this updated too.
  # def valid_session
    # {}
  # end
# 
  # describe "GET index" do
    # it "assigns all reviews as @reviews" do
      # review = FactoryGirl.create(:recipient)
      # get :index, {}, valid_session
      # assigns(:reviews).should eq([review])
    # end
  # end
# 
  # describe "GET show" do
    # it "assigns the requested review as @review" do
      # review = FactoryGirl.create(:recipient)
      # get :show, {:id => review.to_param}, valid_session
      # assigns(:review).should eq(review)
    # end
  # end
# 
  # describe "GET new" do
    # it "assigns a new review as @review" do
      # get :new, {}, valid_session
      # assigns(:review).should be_a_new(Review)
    # end
  # end
# 
  # describe "GET edit" do
    # it "assigns the requested review as @review" do
      # review = FactoryGirl.create(:recipient)
      # get :edit, {:id => review.to_param}, valid_session
      # assigns(:review).should eq(review)
    # end
  # end
# 
  # describe "POST create" do
    # describe "with valid params" do
      # it "creates a new Review" do
        # expect {
          # post :create, {:review => valid_attributes}, valid_session
        # }.to change(Review, :count).by(1)
      # end
# 
      # it "assigns a newly created review as @review" do
        # post :create, {:review => valid_attributes}, valid_session
        # assigns(:review).should be_a(Review)
        # assigns(:review).should be_persisted
      # end
# 
      # it "redirects to the created review" do
        # post :create, {:review => valid_attributes}, valid_session
        # response.should redirect_to(Review.last)
      # end
    # end
# 
    # describe "with invalid params" do
      # it "assigns a newly created but unsaved review as @review" do
        # # Trigger the behavior that occurs when invalid params are submitted
        # Review.any_instance.stub(:save).and_return(false)
        # post :create, {:review => { "product" => "invalid value" }}, valid_session
        # assigns(:review).should be_a_new(Review)
      # end
# 
      # it "re-renders the 'new' template" do
        # # Trigger the behavior that occurs when invalid params are submitted
        # Review.any_instance.stub(:save).and_return(false)
        # post :create, {:review => { "product" => "invalid value" }}, valid_session
        # response.should render_template("new")
      # end
    # end
  # end
# 
  # describe "PUT update" do
    # describe "with valid params" do
      # it "updates the requested review" do
        # review = FactoryGirl.create(:recipient)
        # # Assuming there are no other reviews in the database, this
        # # specifies that the Review created on the previous line
        # # receives the :update_attributes message with whatever params are
        # # submitted in the request.
        # Review.any_instance.should_receive(:update_attributes).with({ "product" => "" })
        # put :update, {:id => review.to_param, :review => { "product" => "" }}, valid_session
      # end
# 
      # it "assigns the requested review as @review" do
        # review = FactoryGirl.create(:recipient)
        # put :update, {:id => review.to_param, :review => valid_attributes}, valid_session
        # assigns(:review).should eq(review)
      # end
# 
      # it "redirects to the review" do
        # review = FactoryGirl.create(:recipient)
        # put :update, {:id => review.to_param, :review => valid_attributes}, valid_session
        # response.should redirect_to(review)
      # end
    # end
# 
    # describe "with invalid params" do
      # it "assigns the review as @review" do
        # review = FactoryGirl.create(:recipient)
        # # Trigger the behavior that occurs when invalid params are submitted
        # Review.any_instance.stub(:save).and_return(false)
        # put :update, {:id => review.to_param, :review => { "product" => "invalid value" }}, valid_session
        # assigns(:review).should eq(review)
      # end
# 
      # it "re-renders the 'edit' template" do
        # review = FactoryGirl.create(:recipient)
        # # Trigger the behavior that occurs when invalid params are submitted
        # Review.any_instance.stub(:save).and_return(false)
        # put :update, {:id => review.to_param, :review => { "product" => "invalid value" }}, valid_session
        # response.should render_template("edit")
      # end
    # end
  # end
# 
  # describe "DELETE destroy" do
    # it "destroys the requested review" do
      # review = FactoryGirl.create(:recipient)
      # expect {
        # delete :destroy, {:id => review.to_param}, valid_session
      # }.to change(Review, :count).by(-1)
    # end
# 
    # it "redirects to the reviews list" do
      # review = FactoryGirl.create(:recipient)
      # delete :destroy, {:id => review.to_param}, valid_session
      # response.should redirect_to(reviews_url)
    # end
  # end
# 
# end

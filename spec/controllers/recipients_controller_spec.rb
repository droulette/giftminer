require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RecipientsController, :type => :controller do
  login_user
  
  before(:each) do
  end
  
  after(:each) do
    User.delete_all
    Recipient.delete_all
  end

  # This should return the minimal set of attributes required to create a valid
  # Recipient. As you add validations to Recipient, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "user" => "" }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RecipientsController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all recipients as @recipients" do
      controller.stub!(:current_user).and_return(@user)
      @recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
      get :index, {}, valid_session
      assigns(:recipients).should eq([@recipient])
    end
  end

  describe "GET show" do
    it "assigns the requested recipient as @recipient" do
      recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
      get :show, {:id => recipient.to_param}, valid_session
      assigns(:recipient).should eq(recipient)
    end
  end
# 
  describe "GET new" do
    it "assigns a new recipient as @recipient" do
      controller.stub!(:current_user).and_return(@user)
      get :new, {}, valid_session
      assigns(:recipient).should be_a_new(Recipient)
    end
  end

  describe "GET edit" do
    it "assigns the requested recipient as @recipient" do
      recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
      get :edit, {:id => recipient.to_param}, valid_session
      assigns(:recipient).should eq(recipient)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Recipient" do
        controller.stub!(:current_user).and_return(@user)
        u = FactoryGirl.build(:recipient, :user_id => @user.id, :first_name => 'Bill')
        post :create, recipient: u.attributes
        Recipient.last.first_name.should eq('Bill')
      end

      it "assigns a newly created recipient as @recipient" do
        controller.stub!(:current_user).and_return(@user)
        u = FactoryGirl.build(:recipient, :user_id => @user.id)
        post :create, recipient: u.attributes
        assigns(:recipient).should be_a(Recipient)
        assigns(:recipient).should be_persisted
      end

      it "redirects to the created recipient" do
        controller.stub!(:current_user).and_return(@user)
        u = FactoryGirl.build(:recipient, :user_id => @user.id)
        post :create, recipient: u.attributes
        response.should redirect_to(Recipient.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved recipient as @recipient" do
        # Trigger the behavior that occurs when invalid params are submitted
        controller.stub!(:current_user).and_return(@user)
        Recipient.any_instance.stub(:save).and_return(false)
        post :create, {:recipient => { "first_name" => "invalid value" }}, valid_session
        assigns(:recipient).should be_a_new(Recipient)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        controller.stub!(:current_user).and_return(@user)
        Recipient.any_instance.stub(:save).and_return(false)
        post :create, {:recipient => { "first_name" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested recipient" do
        recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
        # Assuming there are no other recipients in the database, this
        # specifies that the Recipient created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Recipient.any_instance.should_receive(:update_attributes).with({ "user" => "" })
        put :update, {:id => recipient.to_param, :recipient => { "user" => "" }}, valid_session
      end

      it "assigns the requested recipient as @recipient" do
        @recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
        put :update, {:id => @recipient, recipient: FactoryGirl.attributes_for(:recipient)}, valid_session
        assigns(:recipient).should eq(@recipient)
      end

      it "redirects to the recipient" do
        @recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
        put :update, {:id => @recipient, recipient: FactoryGirl.attributes_for(:recipient)}, valid_session
        response.should redirect_to(@recipient)
      end
    end

    describe "with invalid params" do
      it "assigns the recipient as @recipient" do
        recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
        # Trigger the behavior that occurs when invalid params are submitted
        Recipient.any_instance.stub(:save).and_return(false)
        put :update, {:id => recipient.to_param, :recipient => { "first_name" => "invalid value" }}, valid_session
        assigns(:recipient).should eq(recipient)
      end

      it "re-renders the 'edit' template" do
        recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
        # Trigger the behavior that occurs when invalid params are submitted
        Recipient.any_instance.stub(:save).and_return(false)
        put :update, {:id => recipient.to_param, :recipient => { "first_name" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested recipient" do
      recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
      expect {
        delete :destroy, {:id => recipient.to_param}, valid_session
      }.to change(Recipient, :count).by(-1)
    end

    it "redirects to the recipients list" do
      recipient = FactoryGirl.create(:recipient, :user_id => @user.id)
      delete :destroy, {:id => recipient.to_param}, valid_session
      response.should redirect_to(recipients_url)
    end
  end

end
